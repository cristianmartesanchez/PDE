// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PDE.Persistence;

#nullable disable

namespace PDE.Persistence.Migrations
{
    [DbContext(typeof(DBPDEContext))]
    [Migration("20220511182645_campoIdentity3")]
    partial class campoIdentity3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cargo", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.CargoTerritorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<int?>("CargoSupervisorId")
                        .HasColumnType("int");

                    b.Property<int>("EstructuraId")
                        .HasColumnType("int");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstructuraId");

                    b.HasIndex(new[] { "CargoId" }, "IX_CargoTerritorial_CargoId");

                    b.HasIndex(new[] { "CargoSupervisorId" }, "IX_CargoTerritorial_CargoSupervisorId");

                    b.HasIndex(new[] { "LocalidadId" }, "IX_CargoTerritorial_LocalidadId");

                    b.ToTable("CargoTerritorial", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LlevaColegio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LlevaDatosActa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LlevaDatosPasaporte")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PuedeVotar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("PDE.Models.Entities.Circunscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodigoCircunscripcion")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegID");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Circunscripcion", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.CiudadSeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodigoCiudad")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DistritoMunicipalId")
                        .HasColumnType("int");

                    b.Property<string>("Estatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int>("MunicipioId")
                        .HasColumnType("int");

                    b.Property<long?>("Oficio")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegID");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.ToTable("CiudadSeccion", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Colegio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CantidadInscritos")
                        .HasColumnType("int");

                    b.Property<int?>("CantidadReservada")
                        .HasColumnType("int");

                    b.Property<string>("CodigoColegio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("int");

                    b.Property<int>("RecintoId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TieneCupo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("RecintoId");

                    b.ToTable("Colegios");
                });

            modelBuilder.Entity("PDE.Models.Entities.EstadoCivil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EstadoCiviles");
                });

            modelBuilder.Entity("PDE.Models.Entities.Estructura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estructuras");
                });

            modelBuilder.Entity("PDE.Models.Entities.Localidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Localidad", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.MacroRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegID");

                    b.HasKey("Id");

                    b.ToTable("MacroRegion", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Miembro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Cedula")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Celular")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("ColegioId")
                        .HasColumnType("int");

                    b.Property<int?>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<int>("EstructuraId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int");

                    b.Property<string>("LugarNacimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MunicipioId")
                        .HasColumnType("int");

                    b.Property<int?>("NacionalidadId")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OcupacionId")
                        .HasColumnType("int");

                    b.Property<int?>("SexoId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("ColegioId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("EstructuraId");

                    b.HasIndex("LocalidadId");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("NacionalidadId");

                    b.HasIndex("OcupacionId");

                    b.HasIndex("SexoId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Miembro", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Dm")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("DM")
                        .IsFixedLength();

                    b.Property<string>("Estatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("MunicipioPadreId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Oficio")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegID");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Municipio", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Nacionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gentilicio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Siglas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nacionalidads");
                });

            modelBuilder.Entity("PDE.Models.Entities.Ocupacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequiereTitulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ocupacions");
                });

            modelBuilder.Entity("PDE.Models.Entities.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Estatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<int?>("MunicipioCabeceraId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Oficio")
                        .HasColumnType("decimal(18,0)");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegID");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Zona")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("ZONA");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("PDE.Models.Entities.Recinto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BarrioId")
                        .HasColumnType("int");

                    b.Property<int?>("CapacidadRecinto")
                        .HasColumnType("int");

                    b.Property<int?>("CircunscripcionId")
                        .HasColumnType("int");

                    b.Property<short?>("Codigo")
                        .HasColumnType("smallint");

                    b.Property<string>("CodigoRecinto")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("DescripcionLarga")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("DireccionLarga")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Estatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("Oficio")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegID");

                    b.Property<int?>("SectorParajeId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("CircunscripcionId");

                    b.HasIndex("SectorParajeId");

                    b.ToTable("Recinto", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MacroRegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MacroRegionId");

                    b.ToTable("Region", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.SectorParaje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CiudadSeccionId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoSector")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("varchar(70)");

                    b.Property<string>("Estatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<decimal?>("Oficio")
                        .HasColumnType("decimal(18,0)");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegID");

                    b.HasKey("Id");

                    b.HasIndex("CiudadSeccionId");

                    b.ToTable("SectorParaje", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Sexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdUsuarioCreacion")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuarioModificacion")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Sexo", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Zona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Zona", (string)null);
                });

            modelBuilder.Entity("PDE.Models.Entities.Identity.RegisterModel", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Celular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MiembroId")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("RegisterModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PDE.Models.Entities.CargoTerritorial", b =>
                {
                    b.HasOne("PDE.Models.Entities.Cargo", "Cargo")
                        .WithMany("CargoTerritoriales")
                        .HasForeignKey("CargoId")
                        .IsRequired()
                        .HasConstraintName("FK_CargoTerritorial_Cargo");

                    b.HasOne("PDE.Models.Entities.Cargo", "CargoSupervisor")
                        .WithMany("CargoTerritorialSupervisors")
                        .HasForeignKey("CargoSupervisorId")
                        .HasConstraintName("FK_CargoTerritorial_SupervisorId");

                    b.HasOne("PDE.Models.Entities.Estructura", "Estructura")
                        .WithMany()
                        .HasForeignKey("EstructuraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PDE.Models.Entities.Localidad", "Localidad")
                        .WithMany("CargoTerritorials")
                        .HasForeignKey("LocalidadId")
                        .IsRequired()
                        .HasConstraintName("FK_CargoTerritorial_Localidad");

                    b.Navigation("Cargo");

                    b.Navigation("CargoSupervisor");

                    b.Navigation("Estructura");

                    b.Navigation("Localidad");
                });

            modelBuilder.Entity("PDE.Models.Entities.Circunscripcion", b =>
                {
                    b.HasOne("PDE.Models.Entities.Provincia", "Provincia")
                        .WithMany("Circunscripcions")
                        .HasForeignKey("ProvinciaId")
                        .IsRequired()
                        .HasConstraintName("FK_Circunscripcion_Provincia");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("PDE.Models.Entities.CiudadSeccion", b =>
                {
                    b.HasOne("PDE.Models.Entities.Municipio", "Municipio")
                        .WithMany("CiudadSeccions")
                        .HasForeignKey("MunicipioId")
                        .IsRequired()
                        .HasConstraintName("FK_CiudadSeccion_Municipio");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("PDE.Models.Entities.Colegio", b =>
                {
                    b.HasOne("PDE.Models.Entities.Municipio", "Municipio")
                        .WithMany("Colegios")
                        .HasForeignKey("MunicipioId")
                        .IsRequired()
                        .HasConstraintName("FK_Colegios_Municipio");

                    b.HasOne("PDE.Models.Entities.Recinto", "Recinto")
                        .WithMany("Colegios")
                        .HasForeignKey("RecintoId")
                        .IsRequired()
                        .HasConstraintName("FK_Colegios_Recinto");

                    b.Navigation("Municipio");

                    b.Navigation("Recinto");
                });

            modelBuilder.Entity("PDE.Models.Entities.Miembro", b =>
                {
                    b.HasOne("PDE.Models.Entities.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PDE.Models.Entities.Categoria", "Categoria")
                        .WithMany("Miembros")
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK_Miembro_Categorias");

                    b.HasOne("PDE.Models.Entities.Colegio", "Colegio")
                        .WithMany("Miembros")
                        .HasForeignKey("ColegioId")
                        .HasConstraintName("FK_Miembro_Colegios");

                    b.HasOne("PDE.Models.Entities.EstadoCivil", "EstadoCivil")
                        .WithMany("Miembros")
                        .HasForeignKey("EstadoCivilId")
                        .HasConstraintName("FK_Miembro_EstadoCiviles");

                    b.HasOne("PDE.Models.Entities.Estructura", "Estructura")
                        .WithMany()
                        .HasForeignKey("EstructuraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PDE.Models.Entities.Localidad", "Localidad")
                        .WithMany("Miembros")
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PDE.Models.Entities.Municipio", "Municipio")
                        .WithMany("Miembros")
                        .HasForeignKey("MunicipioId")
                        .HasConstraintName("FK_Miembro_Municipio");

                    b.HasOne("PDE.Models.Entities.Nacionalidad", "Nacionalidad")
                        .WithMany("Miembros")
                        .HasForeignKey("NacionalidadId")
                        .HasConstraintName("FK_Miembro_Nacionalidads");

                    b.HasOne("PDE.Models.Entities.Ocupacion", "Ocupacion")
                        .WithMany("Miembros")
                        .HasForeignKey("OcupacionId")
                        .HasConstraintName("FK_Miembro_Ocupacions");

                    b.HasOne("PDE.Models.Entities.Sexo", "Sexo")
                        .WithMany("Miembros")
                        .HasForeignKey("SexoId")
                        .HasConstraintName("FK_Miembro_Sexo");

                    b.HasOne("PDE.Models.Entities.Miembro", "Supervisor")
                        .WithMany("InverseSupervisor")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("FK_Miembro_Miembro");

                    b.Navigation("Cargo");

                    b.Navigation("Categoria");

                    b.Navigation("Colegio");

                    b.Navigation("EstadoCivil");

                    b.Navigation("Estructura");

                    b.Navigation("Localidad");

                    b.Navigation("Municipio");

                    b.Navigation("Nacionalidad");

                    b.Navigation("Ocupacion");

                    b.Navigation("Sexo");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("PDE.Models.Entities.Municipio", b =>
                {
                    b.HasOne("PDE.Models.Entities.Provincia", "Provincia")
                        .WithMany("Municipios")
                        .HasForeignKey("ProvinciaId")
                        .IsRequired()
                        .HasConstraintName("FK_Municipio_Provincia");

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("PDE.Models.Entities.Provincia", b =>
                {
                    b.HasOne("PDE.Models.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("PDE.Models.Entities.Recinto", b =>
                {
                    b.HasOne("PDE.Models.Entities.Circunscripcion", "Circunscripcion")
                        .WithMany("Recintos")
                        .HasForeignKey("CircunscripcionId")
                        .HasConstraintName("FK_Recinto_Circunscripcion");

                    b.HasOne("PDE.Models.Entities.SectorParaje", "SectorParaje")
                        .WithMany("Recintos")
                        .HasForeignKey("SectorParajeId")
                        .HasConstraintName("FK_Recinto_SectorParaje");

                    b.Navigation("Circunscripcion");

                    b.Navigation("SectorParaje");
                });

            modelBuilder.Entity("PDE.Models.Entities.Region", b =>
                {
                    b.HasOne("PDE.Models.Entities.MacroRegion", "MacroRegion")
                        .WithMany("Regions")
                        .HasForeignKey("MacroRegionId")
                        .HasConstraintName("FK_Region_MacroRegion");

                    b.Navigation("MacroRegion");
                });

            modelBuilder.Entity("PDE.Models.Entities.SectorParaje", b =>
                {
                    b.HasOne("PDE.Models.Entities.CiudadSeccion", "CiudadSeccion")
                        .WithMany("SectorParajes")
                        .HasForeignKey("CiudadSeccionId")
                        .IsRequired()
                        .HasConstraintName("FK_SectorParaje_CiudadSeccion");

                    b.Navigation("CiudadSeccion");
                });

            modelBuilder.Entity("PDE.Models.Entities.Cargo", b =>
                {
                    b.Navigation("CargoTerritorialSupervisors");

                    b.Navigation("CargoTerritoriales");
                });

            modelBuilder.Entity("PDE.Models.Entities.Categoria", b =>
                {
                    b.Navigation("Miembros");
                });

            modelBuilder.Entity("PDE.Models.Entities.Circunscripcion", b =>
                {
                    b.Navigation("Recintos");
                });

            modelBuilder.Entity("PDE.Models.Entities.CiudadSeccion", b =>
                {
                    b.Navigation("SectorParajes");
                });

            modelBuilder.Entity("PDE.Models.Entities.Colegio", b =>
                {
                    b.Navigation("Miembros");
                });

            modelBuilder.Entity("PDE.Models.Entities.EstadoCivil", b =>
                {
                    b.Navigation("Miembros");
                });

            modelBuilder.Entity("PDE.Models.Entities.Localidad", b =>
                {
                    b.Navigation("CargoTerritorials");

                    b.Navigation("Miembros");
                });

            modelBuilder.Entity("PDE.Models.Entities.MacroRegion", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("PDE.Models.Entities.Miembro", b =>
                {
                    b.Navigation("InverseSupervisor");
                });

            modelBuilder.Entity("PDE.Models.Entities.Municipio", b =>
                {
                    b.Navigation("CiudadSeccions");

                    b.Navigation("Colegios");

                    b.Navigation("Miembros");
                });

            modelBuilder.Entity("PDE.Models.Entities.Nacionalidad", b =>
                {
                    b.Navigation("Miembros");
                });

            modelBuilder.Entity("PDE.Models.Entities.Ocupacion", b =>
                {
                    b.Navigation("Miembros");
                });

            modelBuilder.Entity("PDE.Models.Entities.Provincia", b =>
                {
                    b.Navigation("Circunscripcions");

                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("PDE.Models.Entities.Recinto", b =>
                {
                    b.Navigation("Colegios");
                });

            modelBuilder.Entity("PDE.Models.Entities.SectorParaje", b =>
                {
                    b.Navigation("Recintos");
                });

            modelBuilder.Entity("PDE.Models.Entities.Sexo", b =>
                {
                    b.Navigation("Miembros");
                });
#pragma warning restore 612, 618
        }
    }
}
